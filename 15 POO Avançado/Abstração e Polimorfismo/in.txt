

Enunciado: Sistema de Simulação de Processamento Industrial com Abstração e Polimorfismo

Objetivo:
	Desenvolva um sistema de simulação de processamento industrial em C# que demonstre abstração e polimorfismo avançados. 
	O sistema deve modelar diferentes estações de trabalho em uma fábrica inteligente, cada uma com comportamentos únicos de processamento, mas gerenciadas de forma polimórfica.



Requisitos Técnicos:

	Classe Abstrata WorkStation:

		Propriedades abstratas:

			string StationId (identificador único)

			int MaxCapacity (capacidade máxima de itens)



Métodos abstratos:

		void Initialize() (configurações iniciais)

		ProcessingResult ProcessItem(Item item) (processa um item e retorna resultado)

		void Shutdown() (procedimentos de desligamento)



Método concreto:

		virtual string GetDiagnostics() (retorna diagnóstico genérico)



Classes Concretas (3 tipos de estações):

		AssemblyRobot : WorkStation

		Processamento: Realiza montagens complexas com 5% de chance de falha

		Sobrescreve GetDiagnostics() para incluir precisão de movimentos

		PrecisionOven : WorkStation

		Processamento: Aplica tratamento térmico com perda de material variável (1-3%)

		Implementa Initialize() com protocolo de aquecimento específico

		QualityControlScanner : WorkStation

		Processamento: Inspeciona itens usando critérios de tolerância dinâmicos

		Adiciona método void Calibrate() (não presente em outras estações)



Polimorfismo Avançado:

		Criar lista heterogênea de WorkStation contendo todas as estações

		Processar itens de forma polimórfica usando um laço

		Chamar GetDiagnostics() polimorficamente para cada estação

		Demonstrar uso de as ou is para acessar exclusivamente Calibrate() da estação QualityControlScanner



Item e Resultados:

	Classe Item com:

		Guid SerialNumber

		int QualityScore

		MaterialType Material (enum: Metal, Polímero, Cerâmica)



Registro ProcessingResult:

		bool Success

		string ErrorCode

		float MaterialWaste



Fábrica de Estações:

		Classe estática WorkStationFactory com método CreateWorkStation(StationType type)

		Usar padrão Factory para encapsular criação complexa das estações




Funcionalidades do Programa:
		Inicializar 5 estações (mix dos 3 tipos) usando a fábrica

	Simular processamento de 10 itens:

		Cada item é processado por uma estação aleatória da lista

		Validar capacidade máxima antes de processar



Dashboard em tempo real:

		Exibir estatísticas após cada processamento:

			Taxa de sucesso agregada

			Waste médio de material

			Diagnóstico específico de cada estação



Ao final:

	Chamar Shutdown() polimórfico para todas as estações

Relatório final com:

	Total de itens processados por tipo de estação

	Estação com maior eficiência (sucessos/capacidade)

Regras de Implementação:
	Usar herança, 
	modificadores virtual/override e 
	abstract

Garantir encapsulamento (propriedades privadas com acesso via métodos)



Implementar 2 interfaces adicionais:

		IEnergyConsumable com propriedade float PowerDraw

		IMaintenanceSchedule com método TimeSpan GetNextMaintenance()



Tratar exceções customizadas:

	CapacityExceededException

	CalibrationException (apenas para QualityControlScanner)